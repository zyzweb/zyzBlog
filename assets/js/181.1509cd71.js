(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{624:function(v,_,t){"use strict";t.r(_);var e=t(2),a=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("strong",[v._v("设计模式的目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性")])]),v._v(" "),_("h3",{attrs:{id:"常见的设计模式-23-种"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的设计模式-23-种"}},[v._v("#")]),v._v(" 常见的设计模式(23 种)")]),v._v(" "),_("p",[v._v("创建型")]),v._v(" "),_("ul",[_("li",[v._v("单例模式")]),v._v(" "),_("li",[v._v("原型模式")]),v._v(" "),_("li",[v._v("工厂模式")]),v._v(" "),_("li",[v._v("抽象工厂模式")]),v._v(" "),_("li",[v._v("建造者模式")])]),v._v(" "),_("p",[v._v("结构型")]),v._v(" "),_("ul",[_("li",[v._v("适配器模式")]),v._v(" "),_("li",[v._v("装饰器模式")]),v._v(" "),_("li",[v._v("代理模式")]),v._v(" "),_("li",[v._v("外观模式")]),v._v(" "),_("li",[v._v("桥接模式")]),v._v(" "),_("li",[v._v("组合模式")]),v._v(" "),_("li",[v._v("享元模式")])]),v._v(" "),_("p",[v._v("行为型")]),v._v(" "),_("ul",[_("li",[v._v("观察者模式")]),v._v(" "),_("li",[v._v("迭代器模式")]),v._v(" "),_("li",[v._v("策略模式")]),v._v(" "),_("li",[v._v("模板方法模式")]),v._v(" "),_("li",[v._v("职责链模式")]),v._v(" "),_("li",[v._v("命令模式")]),v._v(" "),_("li",[v._v("备忘录模式")]),v._v(" "),_("li",[v._v("状态模式")]),v._v(" "),_("li",[v._v("访问者模式")]),v._v(" "),_("li",[v._v("中介者模式")]),v._v(" "),_("li",[v._v("解释器模式")])]),v._v(" "),_("h3",{attrs:{id:"六大设计原则-solid-首字母"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六大设计原则-solid-首字母"}},[v._v("#")]),v._v(" 六大设计原则(solid)首字母")]),v._v(" "),_("p",[v._v("Single Responsibility Principle：单一职责原则 一个程序只做好一件事")]),v._v(" "),_("p",[v._v("Open Closed Principle：开闭原则 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭")]),v._v(" "),_("p",[v._v("Liskov Substitution Principle：里氏替换原则")]),v._v(" "),_("blockquote",[_("p",[v._v("子类能覆盖父类")]),v._v(" "),_("p",[v._v("父类能出现的地方子类就能出现")])]),v._v(" "),_("p",[v._v("Law of Demeter：迪米特法则 只与你的直接朋友交谈，不跟“陌生人”说话")]),v._v(" "),_("p",[v._v("Interface Segregation Principle：接口隔离原则")]),v._v(" "),_("blockquote",[_("p",[v._v("保持接口的单一独立")]),v._v(" "),_("p",[v._v("类似单一职责原则，这里更关注接口")])]),v._v(" "),_("p",[v._v("Dependence Inversion Principle：依赖倒置原则")]),v._v(" "),_("blockquote",[_("p",[v._v("面向接口编程，依赖于抽象而不依赖于具体")]),v._v(" "),_("p",[v._v("使用方只关注接口而不关注具体类的实现")])]),v._v(" "),_("h3",{attrs:{id:"架构分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构分类"}},[v._v("#")]),v._v(" 架构分类")]),v._v(" "),_("p",[v._v("系统级架构")]),v._v(" "),_("p",[v._v("应用级架构")]),v._v(" "),_("p",[v._v("模块级架构")]),v._v(" "),_("p",[v._v("代码级架构")]),v._v(" "),_("h3",{attrs:{id:"编程范式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[v._v("#")]),v._v(" 编程范式")]),v._v(" "),_("p",[v._v("范式: 一系列在特定时间、对特定对象的概念和实践")]),v._v(" "),_("p",[v._v("声明式编程: 包括函数式编程")]),v._v(" "),_("p",[v._v("命令式编程: 类似于面向过程")]),v._v(" "),_("p",[v._v("object-oriented programming 面向对象编程")]),v._v(" "),_("p",[v._v("functional programming 函数式编程 面向对象减去状态就成了函数式编程")]),v._v(" "),_("blockquote",[_("p",[v._v("不可变对象是函数式编程的核心概念")])]),v._v(" "),_("p",[v._v("函数式编程--\x3e面向过程")]),v._v(" "),_("p",[v._v("面向对象三大特性 封装 继承 多态")]),v._v(" "),_("p",[_("strong",[v._v("将属性和方法组成一个类的过程就是封装")])]),v._v(" "),_("p",[_("strong",[v._v("封装")]),v._v("：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口")]),v._v(" "),_("p",[_("strong",[v._v("继承")]),v._v(": 有 5 种继承方式")]),v._v(" "),_("p",[_("strong",[v._v("多态")]),v._v(": 多种状态,同一操作作用于不同的对象上,可以产生不同的记过. 比方说，我养了一只猫和一只狗，我对它们发出同一个指令 “叫一下”，猫会喵喵喵，而狗会汪汪汪")]),v._v(" "),_("p",[_("strong",[v._v("高阶函数")]),v._v("是任何以函数作为参数或返回函数的函数，经常用于")]),v._v(" "),_("ul",[_("li",[v._v("使用回调函数、promise 或 monads 对动作、副作用或异步数据流进行抽象或隔离。")]),v._v(" "),_("li",[v._v("为操作各种类型的变量创建工具函数")]),v._v(" "),_("li",[v._v("为了复用或函数组合而创建偏函数或柯里化")]),v._v(" "),_("li",[v._v("将一系列输入的函数串联返回一个函数组合")])]),v._v(" "),_("h3",{attrs:{id:"常见的高阶函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的高阶函数"}},[v._v("#")]),v._v(" 常见的高阶函数")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("compose pipe")]),v._v(" "),_("blockquote",[_("p",[v._v("const compose = (...functions) => flowIn => functions.reduceRight( ( acc,f ) => f(acc), flowIn )")])])]),v._v(" "),_("li",[_("p",[v._v("curry 柯里化")]),v._v(" "),_("blockquote",[_("p",[v._v("const add = a => b => a + b;")]),v._v(" "),_("p",[v._v("add(1)(2)")])])])]),v._v(" "),_("h3",{attrs:{id:"js-中的继承"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-中的继承"}},[v._v("#")]),v._v(" js 中的继承")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("原型链继承")]),v._v(" "),_("blockquote",[_("p",[v._v("把父类的实例挂载到子类的原型上 child.prototype = new Parent()")]),v._v(" "),_("p",[v._v("因为子类实例化对象的属性和方法都指向父类的原型,所以子类之间可能会相互影响")])])]),v._v(" "),_("li",[_("p",[v._v("构造函数继承")]),v._v(" "),_("blockquote",[_("p",[v._v("通过父类.call 改变了 this 的指向")]),v._v(" "),_("p",[_("strong",[v._v("Parent.call(this,id)")])]),v._v(" "),_("p",[v._v("var child1 = new Child(10)")]),v._v(" "),_("p",[v._v("var child2 = new Child(20)")]),v._v(" "),_("p",[v._v("解决了原型链继承,子类之间相互影响的问题,但因为是单独复制的会造成内存浪费")])])]),v._v(" "),_("li",[_("p",[v._v("组合式继承")]),v._v(" "),_("blockquote",[_("p",[v._v("在构造函数继承的基础上,把父类的实例挂载到子类的原型上")]),v._v(" "),_("p",[v._v("Parent.call(this,id)")]),v._v(" "),_("p",[_("strong",[v._v("Child.prototype = new Parent()")])]),v._v(" "),_("p",[v._v("var child1 = new Child(10)")]),v._v(" "),_("p",[v._v("var child2 = new Child(20)")]),v._v(" "),_("p",[v._v("获得了原型链继承和构造函数继承的优点，即避免了内存浪费，又使得每个实例化的子类互不影响")]),v._v(" "),_("p",[v._v("但是父类的构造函数会被创建 2 次,call()的时候一次,new parent()的时候一次")])])]),v._v(" "),_("li",[_("p",[v._v("寄生组合继承")]),v._v(" "),_("blockquote",[_("p",[v._v("刚刚问题的关键是父类的构造函数在原型链继承和构造函数继承的组合形式中被创建了两遍，但是在原型继承中我们并不需要创建父类的构造函数，我们只需要子类继承父类的原型,所以说我们先给父类的原型创建一个副本，然后修改这个原型的 constructor 属性在将其赋值给子类的原型既可")]),v._v(" "),_("p",[v._v("function inheritObject(o) {")]),v._v(" "),_("p",[v._v("function F() {}")]),v._v(" "),_("p",[v._v("F.prototype = o")]),v._v(" "),_("p",[v._v("return new F()")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[v._v("var temp = inheritObject(Parent.prototype); //inheritObject 为了不造成父类原型修改,子类跟着变")]),v._v(" "),_("p",[v._v("temp.constructor = Child")]),v._v(" "),_("p",[v._v("Child.prototype = temp")])])]),v._v(" "),_("li",[_("p",[v._v("es6 class 继承")]),v._v(" "),_("blockquote",[_("p",[v._v("静态属性 静态方法 getter setter super(name, age)")]),v._v(" "),_("p",[v._v("ES5 实现之中，每一个对象都有** proto ** 属性--\x3e构造函数的 prototype 属性")]),v._v(" "),_("p",[v._v("**Class 作为构造函数的语法糖，同时有 prototype 属性和"),_("strong",[v._v("proto")]),v._v("属性，因此同时存在两条继承链")])])])]),v._v(" "),_("h3",{attrs:{id:"new-关键字的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#new-关键字的作用"}},[v._v("#")]),v._v(" new 关键字的作用")]),v._v(" "),_("ol",[_("li",[v._v("创建了一个对象,将 this 指向这个对象的堆内存地址")]),v._v(" "),_("li",[v._v("把 this 指向这个对象 将对象的原型链("),_("strong",[v._v("proto")]),v._v(")指向构造函数的原型(prototype)")]),v._v(" "),_("li",[v._v("将参数赋值给这个对象 执行构造函数的代码")]),v._v(" "),_("li",[v._v("将这个对象返回")])]),v._v(" "),_("blockquote",[_("p",[v._v("注意:如果构造函数的返回值为基本数据类型 string,boolean,number,null,undefined,那么就返回新对象，如果构造函数的返回值为对象类型，那么就返回这个对象类型")])]),v._v(" "),_("h3",{attrs:{id:"构造函数的特征"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的特征"}},[v._v("#")]),v._v(" 构造函数的特征")]),v._v(" "),_("ol",[_("li",[v._v("首字母大写（小写也可以,但是不规范)")]),v._v(" "),_("li",[v._v("内部使用 this")]),v._v(" "),_("li",[v._v("使用 new 生成实例")])]),v._v(" "),_("h3",{attrs:{id:"caller-与-callee"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#caller-与-callee"}},[v._v("#")]),v._v(" caller 与 callee")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("caller 指向调用当前函数的函数")])]),v._v(" "),_("li",[_("p",[v._v("callee 是 arguments 的一个属性,指向函数自己")]),v._v(" "),_("blockquote",[_("p",[v._v("arguments.length 和 arguments.callee.length 用来比较形参和实参的数量")])])])]),v._v(" "),_("h2",{attrs:{id:"架构模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构模式"}},[v._v("#")]),v._v(" 架构模式")]),v._v(" "),_("h3",{attrs:{id:"flux"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#flux"}},[v._v("#")]),v._v(" flux")]),v._v(" "),_("p",[v._v("http://www.ruanyifeng.com/blog/2016/01/flux.html")]),v._v(" "),_("p",[v._v("flux 是一种架构思想，专门解决软件的结构问题。它跟 MVC 架构是同一类东西,但是更加简单和清晰,最大特点 "),_("mark",[v._v("单向数据流")])]),v._v(" "),_("p",[v._v("vuex 是类 flux 的状态管理库")]),v._v(" "),_("h3",{attrs:{id:"mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[v._v("#")]),v._v(" mvc")]),v._v(" "),_("p",[v._v("https://www.ruanyifeng.com/blog/2007/11/mvc.html")]),v._v(" "),_("p",[v._v("Model（模型）、View（视图）和 Controller（控制）"),_("strong",[v._v("单向数据流 backbon flux 采用")])]),v._v(" "),_("img",{staticStyle:{zoom:"33%"},attrs:{src:"http://image.zhuyuanzheng.top/image-20220808103755725.png",alt:"image-20220808103755725"}}),v._v(" "),_("h3",{attrs:{id:"mvp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[v._v("#")]),v._v(" mvp")]),v._v(" "),_("p",[v._v("Django 采用")]),v._v(" "),_("img",{staticStyle:{zoom:"33%"},attrs:{src:"http://image.zhuyuanzheng.top/image-20220808103651693.png",alt:"image-20220808103651693"}}),v._v(" "),_("h3",{attrs:{id:"mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[v._v("#")]),v._v(" mvvm")]),v._v(" "),_("p",[v._v("与 mvp 相同,只是 view 和 viewMode 采用双向绑定（data-binding):View 的变动,自动反映在 ViewModel,反之亦然. Angular 和 Ember 采用")]),v._v(" "),_("img",{staticStyle:{zoom:"30%"},attrs:{src:"http://image.zhuyuanzheng.top/image-20220808103532799.png",alt:"image-20220808103532799"}}),v._v(" "),_("p",[v._v("参考链接:")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://www.jianshu.com/p/3268264ae581",target:"_blank",rel:"noopener noreferrer"}},[v._v("六大设计原则"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6844904032826294286",target:"_blank",rel:"noopener noreferrer"}},[v._v("掘金-JavaScript23 种设计模式"),_("OutboundLink")],1)]),v._v(" "),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30982369",target:"_blank",rel:"noopener noreferrer"}},[v._v("知乎-为什么认为 Backbone 是现代前端框架的基石"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("split chunk")])])}),[],!1,null,null,null);_.default=a.exports}}]);