(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[7677],{1898:(e,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>r});const r={key:"v-687747ec",path:"/doc/koa.html",title:"koa",lang:"zh",frontmatter:{},excerpt:"",headers:[{level:2,title:"异步的发展历程   回调函数--promise--Generato/yield--async/await(es7)",slug:"异步的发展历程-回调函数-promise-generato-yield-async-await-es7",children:[]}],filePathRelative:"doc/koa.md",git:{updatedTime:162471404e4,contributors:[{name:"zhuyuanzheng",email:"yuanzheng.zhu@jyblife.com",commits:1}]}}},7038:(e,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>d});var r=s(6252);const t=(0,r.Wm)("h1",{id:"koa"},[(0,r.Wm)("a",{class:"header-anchor",href:"#koa"},"#"),(0,r.Uk)(" koa")],-1),o=(0,r.Wm)("p",null,"在koa中，一切的流程都是中间件，数据流向遵循洋葱模型，先入后出，是按照类似堆栈的方式组织和执行的",-1),n=(0,r.Wm)("p",null,"数据先进入第一个中间件,最后从第一个中间件流出",-1),l=(0,r.Wm)("p",null,"koa2与koa1的最大区别是koa2实现异步是通过async/awaite，koa1实现异步是通过generator/yield，而express实现异步是通过回调函数的方式",-1),i=(0,r.Wm)("p",null,"koa2与express 提供的API大致相同，express是大而全，内置了大多数的中间件，更让人省心，koa2不绑定任何的框架，干净简洁，小而精，更容易实现定制化，扩展性好",-1),c=(0,r.Wm)("h2",{id:"异步的发展历程-回调函数-promise-generato-yield-async-await-es7"},[(0,r.Wm)("a",{class:"header-anchor",href:"#异步的发展历程-回调函数-promise-generato-yield-async-await-es7"},"#"),(0,r.Uk)(" 异步的发展历程 回调函数--promise--Generato/yield--async/await(es7)")],-1),d={render:function(e,a){return(0,r.wg)(),(0,r.j4)(r.HY,null,[t,o,n,l,i,c],64)}}}}]);