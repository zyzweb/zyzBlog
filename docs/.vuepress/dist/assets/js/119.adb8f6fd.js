(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{708:function(_,v,t){"use strict";t.r(v);var e=t(17),l=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("p",[t("strong",[_._v("设计模式的目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性")])]),_._v(" "),t("h3",{attrs:{id:"常见的设计模式-23种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的设计模式-23种"}},[_._v("#")]),_._v(" 常见的设计模式(23种)")]),_._v(" "),t("p",[_._v("创建型")]),_._v(" "),t("ul",[t("li",[_._v("单例模式")]),_._v(" "),t("li",[_._v("原型模式")]),_._v(" "),t("li",[_._v("工厂模式")]),_._v(" "),t("li",[_._v("抽象工厂模式")]),_._v(" "),t("li",[_._v("建造者模式")])]),_._v(" "),t("p",[_._v("结构型")]),_._v(" "),t("ul",[t("li",[_._v("适配器模式")]),_._v(" "),t("li",[_._v("装饰器模式")]),_._v(" "),t("li",[_._v("代理模式")]),_._v(" "),t("li",[_._v("外观模式")]),_._v(" "),t("li",[_._v("桥接模式")]),_._v(" "),t("li",[_._v("组合模式")]),_._v(" "),t("li",[_._v("享元模式")])]),_._v(" "),t("p",[_._v("行为型")]),_._v(" "),t("ul",[t("li",[_._v("观察者模式")]),_._v(" "),t("li",[_._v("迭代器模式")]),_._v(" "),t("li",[_._v("策略模式")]),_._v(" "),t("li",[_._v("模板方法模式")]),_._v(" "),t("li",[_._v("职责链模式")]),_._v(" "),t("li",[_._v("命令模式")]),_._v(" "),t("li",[_._v("备忘录模式")]),_._v(" "),t("li",[_._v("状态模式")]),_._v(" "),t("li",[_._v("访问者模式")]),_._v(" "),t("li",[_._v("中介者模式")]),_._v(" "),t("li",[_._v("解释器模式")])]),_._v(" "),t("h3",{attrs:{id:"六大设计原则-solid-首字母"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六大设计原则-solid-首字母"}},[_._v("#")]),_._v(" 六大设计原则(solid)首字母")]),_._v(" "),t("p",[_._v("Single Responsibility Principle：单一职责原则   一个程序只做好一件事")]),_._v(" "),t("p",[_._v("Open Closed Principle：开闭原则   一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭")]),_._v(" "),t("p",[_._v("Liskov Substitution Principle：里氏替换原则")]),_._v(" "),t("blockquote",[t("p",[_._v("子类能覆盖父类")]),_._v(" "),t("p",[_._v("父类能出现的地方子类就能出现")])]),_._v(" "),t("p",[_._v("Law of Demeter：迪米特法则    只与你的直接朋友交谈，不跟“陌生人”说话")]),_._v(" "),t("p",[_._v("Interface Segregation Principle：接口隔离原则")]),_._v(" "),t("blockquote",[t("p",[_._v("保持接口的单一独立")]),_._v(" "),t("p",[_._v("类似单一职责原则，这里更关注接口")])]),_._v(" "),t("p",[_._v("Dependence Inversion Principle：依赖倒置原则")]),_._v(" "),t("blockquote",[t("p",[_._v("面向接口编程，依赖于抽象而不依赖于具体")]),_._v(" "),t("p",[_._v("使用方只关注接口而不关注具体类的实现")])]),_._v(" "),t("h3",{attrs:{id:"编程范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[_._v("#")]),_._v(" 编程范式")]),_._v(" "),t("p",[_._v("范式: 一系列在特定时间、对特定对象的概念和实践")]),_._v(" "),t("p",[_._v("声明式编程: 包括函数式编程")]),_._v(" "),t("p",[_._v("命令式编程: 类似于面向过程")]),_._v(" "),t("p",[_._v("object-oriented programming   面向对象编程")]),_._v(" "),t("p",[_._v("functional programming  函数式编程    面向对象减去状态就成了函数式编程")]),_._v(" "),t("blockquote",[t("p",[_._v("不可变对象是函数式编程的核心概念")])]),_._v(" "),t("p",[_._v("函数式编程--\x3e面向过程")]),_._v(" "),t("p",[_._v("面向对象三大特性 封装 继承  多态")]),_._v(" "),t("p",[t("strong",[_._v("将属性和方法组成一个类的过程就是封装")])]),_._v(" "),t("p",[t("strong",[_._v("封装")]),_._v("：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口")]),_._v(" "),t("p",[t("strong",[_._v("继承")]),_._v(": 有5种继承方式")]),_._v(" "),t("p",[t("strong",[_._v("多态")]),_._v(": 多种状态,同一操作作用于不同的对象上,可以产生不同的记过. 比方说，我养了一只猫和一只狗，我对它们发出同一个指令 “叫一下”，猫会喵喵喵，而狗会汪汪汪")]),_._v(" "),t("p",[t("strong",[_._v("高阶函数")]),_._v("是任何以函数作为参数或返回函数的函数，经常用于")]),_._v(" "),t("ul",[t("li",[_._v("使用回调函数、promise或monads对动作、副作用或异步数据流进行抽象或隔离。")]),_._v(" "),t("li",[_._v("为操作各种类型的变量创建工具函数")]),_._v(" "),t("li",[_._v("为了复用或函数组合而创建偏函数或柯里化")]),_._v(" "),t("li",[_._v("将一系列输入的函数串联返回一个函数组合")])]),_._v(" "),t("h3",{attrs:{id:"常见的高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的高阶函数"}},[_._v("#")]),_._v(" 常见的高阶函数")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("compose  pipe")]),_._v(" "),t("blockquote",[t("p",[_._v("const compose = (...functions) => flowIn => functions.reduceRight( ( acc,f ) => f(acc), flowIn )")])])]),_._v(" "),t("li",[t("p",[_._v("curry 柯里化")]),_._v(" "),t("blockquote",[t("p",[_._v("const add = a => b => a + b;")]),_._v(" "),t("p",[_._v("add(1)(2)")])])])]),_._v(" "),t("h3",{attrs:{id:"js中的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js中的继承"}},[_._v("#")]),_._v(" js中的继承")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("原型链继承")]),_._v(" "),t("blockquote",[t("p",[_._v("把父类的实例挂载到子类的原型上 child.prototype = new Parent()")]),_._v(" "),t("p",[_._v("因为子类实例化对象的属性和方法都指向父类的原型,所以子类之间可能会相互影响")])])]),_._v(" "),t("li",[t("p",[_._v("构造函数继承")]),_._v(" "),t("blockquote",[t("p",[_._v("通过父类.call改变了this的指向")]),_._v(" "),t("p",[t("strong",[_._v("Parent.call(this,id)")])]),_._v(" "),t("p",[_._v("var child1 = new Child(10)")]),_._v(" "),t("p",[_._v("var child2 = new Child(20)")]),_._v(" "),t("p",[_._v("解决了原型链继承,子类之间相互影响的问题,但因为是单独复制的会造成内存浪费")])])]),_._v(" "),t("li",[t("p",[_._v("组合式继承")]),_._v(" "),t("blockquote",[t("p",[_._v("在构造函数继承的基础上,把父类的实例挂载到子类的原型上")]),_._v(" "),t("p",[_._v("Parent.call(this,id)")]),_._v(" "),t("p",[t("strong",[_._v("Child.prototype = new Parent()")])]),_._v(" "),t("p",[_._v("var child1 = new Child(10)")]),_._v(" "),t("p",[_._v("var child2 = new Child(20)")]),_._v(" "),t("p",[_._v("获得了原型链继承和构造函数继承的优点，即避免了内存浪费，又使得每个实例化的子类互不影响")]),_._v(" "),t("p",[_._v("但是父类的构造函数会被创建2次,call()的时候一次,new parent()的时候一次")])])]),_._v(" "),t("li",[t("p",[_._v("寄生组合继承")]),_._v(" "),t("blockquote",[t("p",[_._v("刚刚问题的关键是父类的构造函数在原型链继承和构造函数继承的组合形式中被创建了两遍，但是在原型继承中我们并不需要创建父类的构造函数，我们只需要子类继承父类的原型,所以说我们先给父类的原型创建一个副本，然后修改这个原型的constructor属性在将其赋值给子类的原型既可")]),_._v(" "),t("p",[_._v("function inheritObject(o) {")]),_._v(" "),t("p",[_._v("function F() {}")]),_._v(" "),t("p",[_._v("F.prototype = o;")]),_._v(" "),t("p",[_._v("eturn new F();")]),_._v(" "),t("p",[_._v("}")]),_._v(" "),t("p",[_._v("var temp = inheritObject(Parent.prototype);   //inheritObject为了不造成父类原型修改,子类跟着变")]),_._v(" "),t("p",[_._v("temp.constructor = Child")]),_._v(" "),t("p",[_._v("Child.prototype = temp")])])]),_._v(" "),t("li",[t("p",[_._v("es6 class继承")]),_._v(" "),t("blockquote",[t("p",[_._v("静态属性 静态方法 getter setter super(name, age)")]),_._v(" "),t("p",[_._v("ES5实现之中，每一个对象都有__ proto __ 属性--\x3e构造函数的prototype属性")]),_._v(" "),t("p",[_._v("**Class作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链")])])])]),_._v(" "),t("h3",{attrs:{id:"new关键字的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new关键字的作用"}},[_._v("#")]),_._v(" new关键字的作用")]),_._v(" "),t("ol",[t("li",[_._v("创建了一个对象,将this指向这个对象的堆内存地址")]),_._v(" "),t("li",[_._v("把this指向这个对象    将对象的原型链("),t("strong",[_._v("proto")]),_._v(")指向构造函数的原型(prototype)")]),_._v(" "),t("li",[_._v("将参数赋值给这个对象   执行构造函数的代码")]),_._v(" "),t("li",[_._v("将这个对象返回")])]),_._v(" "),t("blockquote",[t("p",[_._v("注意:如果构造函数的返回值为基本数据类型string,boolean,number,null,undefined,那么就返回新对象，如果构造函数的返回值为对象类型，那么就返回这个对象类型")])]),_._v(" "),t("h3",{attrs:{id:"构造函数的特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的特征"}},[_._v("#")]),_._v(" 构造函数的特征")]),_._v(" "),t("ol",[t("li",[_._v("首字母大写（小写也可以,但是不规范)")]),_._v(" "),t("li",[_._v("内部使用this")]),_._v(" "),t("li",[_._v("使用 new生成实例")])]),_._v(" "),t("h3",{attrs:{id:"caller与callee"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#caller与callee"}},[_._v("#")]),_._v(" caller与callee")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("caller指向调用当前函数的函数")])]),_._v(" "),t("li",[t("p",[_._v("callee是arguments的一个属性,指向函数自己")]),_._v(" "),t("blockquote",[t("p",[_._v("arguments.length和arguments.callee.length 用来比较形参和实参的数量")])])])]),_._v(" "),t("p",[_._v("参考链接:")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/3268264ae581",target:"_blank",rel:"noopener noreferrer"}},[_._v("六大设计原则"),t("OutboundLink")],1)]),_._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844904032826294286",target:"_blank",rel:"noopener noreferrer"}},[_._v("掘金-JavaScript23种设计模式"),t("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=l.exports}}]);